x<-c(x,((112-i)/8)^4+rnorm(1,0,0.3))
}
for(i in 112:200){
x<-c(x,rnorm(1,0,0.3))
}
a1<-changepoint(x,5,1)
a2<-changepoint(x,9,2)
set.seed(1234)
x<-c()
for(i in 1:90){
x<-c(x,rnorm(1,0,0.3))
}
for(i in 91:99){
x<-c(x,((i-90)/6)^(4)+rnorm(1,0,0.3))
}
for(i in 100:111){
x<-c(x,((112-i)/8)^4+rnorm(1,0,0.3))
}
for(i in 112:200){
x<-c(x,rnorm(1,0,0.3))
}
a1<-changepoint(x,9,1)
a2<-changepoint(x,9,2)
set.seed(1234)
x<-c()
for(i in 1:90){
x<-c(x,rnorm(1,0,0.3))
}
for(i in 91:99){
x<-c(x,((i-90)/6)^(4)+rnorm(1,0,0.3))
}
for(i in 100:111){
x<-c(x,((112-i)/8)^4+rnorm(1,0,0.3))
}
for(i in 112:200){
x<-c(x,rnorm(1,0,0.3))
}
a1<-changepoint(x,7,1)
a2<-changepoint(x,7,2)
set.seed(1234)
x<-c()
for(i in 1:90){
x<-c(x,rnorm(1,0,0.3))
}
for(i in 91:99){
x<-c(x,((i-90)/6)^(4)+rnorm(1,0,0.3))
}
for(i in 100:111){
x<-c(x,((112-i)/8)^4+rnorm(1,0,0.3))
}
for(i in 112:200){
x<-c(x,rnorm(1,0,0.3))
}
a1<-changepoint(x,8,1)
a2<-changepoint(x,6,2)
y<-rep(0,5000)
epi<-rnorm(5000,0,0.5)
deltay<-c(rep(0,500),rep(1,500),rep(3,500),rep(6,500),rep(10,500),rep(15,500),rep(21,500),rep(28,500),rep(36,500),rep(45,500))
for(i in 3:5000){
y[i]<-0.6*y[i-1]-0.5*y[i-2]+epi[i]+deltay[i]
}
changepoint(y,15,1)
set.seed(1)
y<-rep(0,5000)
epi<-rnorm(5000,0,0.5)
deltay<-c(rep(0,500),rep(1,500),rep(3,500),rep(6,500),rep(10,500),rep(15,500),rep(21,500),rep(28,500),rep(36,500),rep(45,500))
for(i in 3:5000){
y[i]<-0.6*y[i-1]-0.5*y[i-2]+epi[i]+deltay[i]
}
changepoint(y,15,1)
library(ggplot2)
library(Rcpp)
visibility<-function(data,m){
graph<-matrix(0,length(data),length(data))
if(length((data))==2){
graph<-matrix(c(0,1,1,0),2,2)
return(graph)
}
for (i in 1:(length(data)-2)) {
for(j in (i+2):(min((i+2+m),length(data)))){
a<-0
for(k in (i+1):(j-1)){
b<-(data[i]+(data[j]-data[i])*(k-i)/(j-i))
if((data[k]<b)){
a<-a
}else{
a<-a+1
}
}
if(a==0){
graph[i,j]<-1
}else{
graph[i,j]<-0
}
}
}
for(i in 1:(length(data)-1)){
graph[i,i+1]<-1
}
graph<-graph+t(graph)
return(graph)
}
sourceCpp("../src/inst/BDM.cpp")
# BDM<-function(graph){
#   c<-rep(0,length(graph[1,]))
#   for(i in 1:length(graph[1,])){
#     for(j in 1:i){
#       c[i]<-c[i]+graph[i,j]
#     }
#   }
#   return(c)
# }
MOVmean<-function(data,n){
mean<-rep(0,length(data))
if(n==1){
mean<-data
}else if(n==2){
for(i in 1:(n/2)){
mean[i]<-data[i]
}
for(i in (n/2+1):(length(data)-n/2+1)){
mean[i]<-mean(data[(i-n/2):(i+n/2-1)])
}
}else if((n>2)&(n%%2==0)){
for(i in 1:(n/2)){
mean[i]<-mean(data[1:(i+n/2-1)])
}
for(i in (n/2+1):(length(data)-n/2+1)){
mean[i]<-mean(data[(i-n/2):(i+n/2-1)])
}
for(i in (length(data)-n/2+2):length(data)){
mean[i]<-mean(data[(i-n/2):length(data)])
}
}else {
n2<-floor(n/2)
n1<-ceiling(n/2)
for(i in 1:n2){
mean[i]<-mean(data[1:(i+n2)])
}
for(i in (n2+1):(length(data)-n2)){
mean[i]<-mean(data[(i-n2):(i+n2)])
}
for(i in (length(data)-n2+1):length(data)){
mean[i]<-mean(data[(i-n2):length(data)])
}
}
return(mean)
}
MOVsd<-function(data,n){
sd<-rep(0,length(data))
if(n==1){
sd<-rep(0,length(data))
}else if(n==2){
for(i in 1:(n/2)){
sd[i]<-0
}
for(i in (n/2+1):(length(data)-n/2+1)){
sd[i]<-sd(data[(i-n/2):(i+n/2-1)])
}
}else if((n>2)&(n%%2==0)){
for(i in 1:(n/2)){
sd[i]<-sd(data[1:(i+n/2-1)])
}
for(i in (n/2+1):(length(data)-n/2+1)){
sd[i]<-sd(data[(i-n/2):(i+n/2-1)])
}
for(i in (length(data)-n/2+2):length(data)){
sd[i]<-sd(data[(i-n/2):length(data)])
}
}else{
n2<-floor(n/2)
n1<-ceiling(n/2)
for(i in 1:n2){
sd[i]<-sd(data[1:(i+n2)])
}
for(i in (n2+1):(length(data)-n2)){
sd[i]<-sd(data[(i-n2):(i+n2)])
}
for(i in (length(data)-n2+1):length(data)){
sd[i]<-sd(data[(i-n2):length(data)])
}
}
return(sd)
}
changepoint<-function(D,ni,increase,m=250){
z<-D
D<-diff(D)
if(increase==1){
for(i in 1:length(D)){
if(D[i]<0){
D[i]=-D[i]
}
}
}else{
for(i in 1:length(D)){
if(D[i]>0){
D[i]=0
}else{
D[i]=-D[i]
}
}
}
#plot(D,type='l')
Net_test<-visibility (D,m)
#print(Net_test)
#backward network degree
Net_Degree_test=BDM(Net_test)
#plot(Net_Degree_test,type = 'l')
#moving mean of backward degree time series
MA2test=MOVmean(Net_Degree_test,ni)
#moving std of backward degree time series
MStd2test=MOVsd(Net_Degree_test,ni)
#BDI
MA2MStd2test=MA2test+MStd2test
BDIquant<-(mean(MA2MStd2test)+2*sd(MA2MStd2test))
t<-rep(0,length(MA2MStd2test))
for(i in 1:length(MA2MStd2test)){
if(MA2MStd2test[i]>BDIquant){
t[i]<-1
}
}
data1<-data.frame("time1"=1:length(z),z,"test1"=c(t,0))
p<-ggplot(data=data1,aes(x=time1, y = z,color=test1)) + geom_point() +
geom_line()+theme_bw()+ggtitle("changepoint") + theme(plot.title = element_text(hjust = 0.5))
list<-list(Net_Degree_test,MA2test,MStd2test,MA2MStd2test,BDIquant,t,p)
names(list)<-c("BDM","movmean","movsd","BDI","BDIquant","test","figure")
return(list)
}
set.seed(1234)
x<-c()
for(i in 1:90){
x<-c(x,rnorm(1,0,0.3))
}
for(i in 91:99){
x<-c(x,((i-90)/6)^(4)+rnorm(1,0,0.3))
}
for(i in 100:111){
x<-c(x,((112-i)/8)^4+rnorm(1,0,0.3))
}
for(i in 112:200){
x<-c(x,rnorm(1,0,0.3))
}
a1<-changepoint(x,8,1)
a1
a2<-changepoint(x,6,2)
a2
set.seed(1)
y<-rep(0,5000)
epi<-rnorm(5000,0,0.5)
deltay<-c(rep(0,500),rep(1,500),rep(3,500),rep(6,500),rep(10,500),rep(15,500),rep(21,500),rep(28,500),rep(36,500),rep(45,500))
for(i in 3:5000){
y[i]<-0.6*y[i-1]-0.5*y[i-2]+epi[i]+deltay[i]
}
a<-changepoint(y,15,1)
a$figure
library(matrixProfile)
library(zoo)
library(ggplot2)
library(cpm)
library(Rcpp)
#' @description this function can transform time series into a complex network using sliding visibility graph algorithm
#' @param data the time series after diff
#' @param m the size of the window
#' @return a graph
#' @examples
#' \dontrun{
#'     x<-rnorm(100,0,1)
#'     visibility(x,100)
#' }
#' @export
visibility<-function(data,m){
graph<-matrix(0,length(data),length(data))
if(length((data))==2){
graph<-matrix(c(0,1,1,0),2,2)
return(graph)
}
for (i in 1:(length(data)-2)) {
for(j in (i+2):(min((i+2+m),length(data)))){
a<-0
for(k in (i+1):(j-1)){
b<-(data[i]+(data[j]-data[i])*(k-i)/(j-i))
if((data[k]<b)){
a<-a
}else{
a<-a+1
}
}
if(a==0){
graph[i,j]<-1
}else{
graph[i,j]<-0
}
}
}
for(i in 1:(length(data)-1)){
graph[i,i+1]<-1
}
graph<-graph+t(graph)
return(graph)
}
sourceCpp("..//SA24204163//src//inst//BDM.cpp")
#' @description this function can compute the moving mean of time series
#' @param data the time series after diff
#' @param n the size of moving window
#' @return the moving mean
#' @examples
#' \dontrun{
#'     x<-rbinom(20,size=10,prob=0.5)
#'     MOVmean(x,5)
#' }
#' @export
MOVmean<-function(data,n){
mean<-rep(0,length(data))
if(n==1){
mean<-data
}else if(n==2){
for(i in 1:(n/2)){
mean[i]<-data[i]
}
for(i in (n/2+1):(length(data)-n/2+1)){
mean[i]<-mean(data[(i-n/2):(i+n/2-1)])
}
}else if((n>2)&(n%%2==0)){
for(i in 1:(n/2)){
mean[i]<-mean(data[1:(i+n/2-1)])
}
for(i in (n/2+1):(length(data)-n/2+1)){
mean[i]<-mean(data[(i-n/2):(i+n/2-1)])
}
for(i in (length(data)-n/2+2):length(data)){
mean[i]<-mean(data[(i-n/2):length(data)])
}
}else {
n2<-floor(n/2)
n1<-ceiling(n/2)
for(i in 1:n2){
mean[i]<-mean(data[1:(i+n2)])
}
for(i in (n2+1):(length(data)-n2)){
mean[i]<-mean(data[(i-n2):(i+n2)])
}
for(i in (length(data)-n2+1):length(data)){
mean[i]<-mean(data[(i-n2):length(data)])
}
}
return(mean)
}
#' @description this function can compute the moving mean of time series
#' @param data the time series after diff
#' @param n the size of moving window
#' @return the moving standard deviation
#' @examples
#' \dontrun{
#'     x<-rbinom(20,size=10,prob=0.5)
#'     MOVsd(x,5)
#' }
#' @export
MOVsd<-function(data,n){
sd<-rep(0,length(data))
if(n==1){
sd<-rep(0,length(data))
}else if(n==2){
for(i in 1:(n/2)){
sd[i]<-0
}
for(i in (n/2+1):(length(data)-n/2+1)){
sd[i]<-sd(data[(i-n/2):(i+n/2-1)])
}
}else if((n>2)&(n%%2==0)){
for(i in 1:(n/2)){
sd[i]<-sd(data[1:(i+n/2-1)])
}
for(i in (n/2+1):(length(data)-n/2+1)){
sd[i]<-sd(data[(i-n/2):(i+n/2-1)])
}
for(i in (length(data)-n/2+2):length(data)){
sd[i]<-sd(data[(i-n/2):length(data)])
}
}else{
n2<-floor(n/2)
n1<-ceiling(n/2)
for(i in 1:n2){
sd[i]<-sd(data[1:(i+n2)])
}
for(i in (n2+1):(length(data)-n2)){
sd[i]<-sd(data[(i-n2):(i+n2)])
}
for(i in (length(data)-n2+1):length(data)){
sd[i]<-sd(data[(i-n2):length(data)])
}
}
return(sd)
}
#'          for(i in 100:111){
#'            x<-c(x,((112-i)/8)^4+rnorm(1,0,0.3))
#'          }
#'          for(i in 112:200){
#'            x<-c(x,rnorm(1,0,0.3))
#'          }
#'          changepoint(x,9,1)
#'          changepoint(x,12,2)
#' }
#' @export
changepoint<-function(D,ni,increase,m=250){
z<-D
D<-diff(D)
if(increase==1){
for(i in 1:length(D)){
if(D[i]<0){
D[i]=-D[i]
}
}
}else{
for(i in 1:length(D)){
if(D[i]>0){
D[i]=0
}else{
D[i]=-D[i]
}
}
}
#plot(D,type='l')
Net_test<-visibility (D,m)
#print(Net_test)
#backward network degree
Net_Degree_test=BDM(Net_test)
#plot(Net_Degree_test,type = 'l')
#moving mean of backward degree time series
MA2test=MOVmean(Net_Degree_test,ni)
#moving std of backward degree time series
MStd2test=MOVsd(Net_Degree_test,ni)
#BDI
MA2MStd2test=MA2test+MStd2test
BDIquant<-(mean(MA2MStd2test)+2*sd(MA2MStd2test))
t<-rep(0,length(MA2MStd2test))
for(i in 1:length(MA2MStd2test)){
if(MA2MStd2test[i]>BDIquant){
t[i]<-1
}
}
data1<-data.frame("time1"=1:length(z),z,"test1"=c(t,0))
p<-ggplot(data=data1,aes(x=data1$time1, y = z,color=data1$test1)) + geom_point() +
geom_line()+theme_bw()+ggtitle("changepoint") + theme(plot.title = element_text(hjust = 0.5))
list<-list(Net_Degree_test,MA2test,MStd2test,MA2MStd2test,BDIquant,t,p)
names(list)<-c("BDM","movmean","movsd","BDI","BDIquant","test","figure")
return(list)
}
#changepoint(DSPtest,16,1)
#changepoint(DSPtest,23,2)
# set.seed(12)
x<-c()
for(i in 1:90){
x<-c(x,rnorm(1,0,0.3))
}
for(i in 91:99){
x<-c(x,((i-90)/6)^(4)+rnorm(1,0,0.3))
}
for(i in 100:111){
x<-c(x,((112-i)/8)^4+rnorm(1,0,0.3))
}
for(i in 112:200){
x<-c(x,rnorm(1,0,0.3))
}
changepoint(x,9,1)
devtools::check()
rlang::last_trace()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::clean_dll()
devtools::check()
devtools::check()
rlang::last_trace()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
rm(list = c("BDM", "changepoint", "MOVmean", "MOVsd", "visibility"))
devtools::check()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
install.packages('../SA24204163_0.1.0.tar.gz',repo=NULL)
install.packages('../SA24204163_0.1.0.tar.gz',repo=NULL)
devtools::install_github("wkl122/SA24204163")
# 加载包
library(SA24204163)
# 查看包的 vignettes 列表
vignette(package = "SA24204163")
vignette <- readRDS("D:/statistical-computing/SA24204163/Meta/vignette.rds")
vignette("vignette1", package = "SA24204163")
devtools::install_github("wkl122/SA24204163”)
1
=
print()
devtools::install_github("wkl122/SA24204163")
devtools::install_github("wkl122/SA24204163")
devtools::install_github("wkl122/SA24204163")
packageDescription("matrixprofile")
packageDescription("zoo")
packageDescription("cpm")
devtools::check()
devtools::check()
1
devtools::check()
devtools::check()
devtools::check()
